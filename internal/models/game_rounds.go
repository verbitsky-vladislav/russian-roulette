// Code generated by SQLBoiler 4.18.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// GameRound is an object representing the database table.
type GameRound struct {
	UUID      string      `boil:"uuid" json:"uuid" toml:"uuid" yaml:"uuid"`
	GameUUID  null.String `boil:"game_uuid" json:"game_uuid,omitempty" toml:"game_uuid" yaml:"game_uuid,omitempty"`
	UserUUID  null.String `boil:"user_uuid" json:"user_uuid,omitempty" toml:"user_uuid" yaml:"user_uuid,omitempty"`
	Action    null.String `boil:"action" json:"action,omitempty" toml:"action" yaml:"action,omitempty"`
	Result    null.String `boil:"result" json:"result,omitempty" toml:"result" yaml:"result,omitempty"`
	CreatedAt null.Time   `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`

	R *gameRoundR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L gameRoundL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var GameRoundColumns = struct {
	UUID      string
	GameUUID  string
	UserUUID  string
	Action    string
	Result    string
	CreatedAt string
}{
	UUID:      "uuid",
	GameUUID:  "game_uuid",
	UserUUID:  "user_uuid",
	Action:    "action",
	Result:    "result",
	CreatedAt: "created_at",
}

var GameRoundTableColumns = struct {
	UUID      string
	GameUUID  string
	UserUUID  string
	Action    string
	Result    string
	CreatedAt string
}{
	UUID:      "game_rounds.uuid",
	GameUUID:  "game_rounds.game_uuid",
	UserUUID:  "game_rounds.user_uuid",
	Action:    "game_rounds.action",
	Result:    "game_rounds.result",
	CreatedAt: "game_rounds.created_at",
}

// Generated where

var GameRoundWhere = struct {
	UUID      whereHelperstring
	GameUUID  whereHelpernull_String
	UserUUID  whereHelpernull_String
	Action    whereHelpernull_String
	Result    whereHelpernull_String
	CreatedAt whereHelpernull_Time
}{
	UUID:      whereHelperstring{field: "\"game_rounds\".\"uuid\""},
	GameUUID:  whereHelpernull_String{field: "\"game_rounds\".\"game_uuid\""},
	UserUUID:  whereHelpernull_String{field: "\"game_rounds\".\"user_uuid\""},
	Action:    whereHelpernull_String{field: "\"game_rounds\".\"action\""},
	Result:    whereHelpernull_String{field: "\"game_rounds\".\"result\""},
	CreatedAt: whereHelpernull_Time{field: "\"game_rounds\".\"created_at\""},
}

// GameRoundRels is where relationship names are stored.
var GameRoundRels = struct {
	Game string
	User string
}{
	Game: "Game",
	User: "User",
}

// gameRoundR is where relationships are stored.
type gameRoundR struct {
	Game *Game `boil:"Game" json:"Game" toml:"Game" yaml:"Game"`
	User *User `boil:"User" json:"User" toml:"User" yaml:"User"`
}

// NewStruct creates a new relationship struct
func (*gameRoundR) NewStruct() *gameRoundR {
	return &gameRoundR{}
}

func (r *gameRoundR) GetGame() *Game {
	if r == nil {
		return nil
	}
	return r.Game
}

func (r *gameRoundR) GetUser() *User {
	if r == nil {
		return nil
	}
	return r.User
}

// gameRoundL is where Load methods for each relationship are stored.
type gameRoundL struct{}

var (
	gameRoundAllColumns            = []string{"uuid", "game_uuid", "user_uuid", "action", "result", "created_at"}
	gameRoundColumnsWithoutDefault = []string{}
	gameRoundColumnsWithDefault    = []string{"uuid", "game_uuid", "user_uuid", "action", "result", "created_at"}
	gameRoundPrimaryKeyColumns     = []string{"uuid"}
	gameRoundGeneratedColumns      = []string{}
)

type (
	// GameRoundSlice is an alias for a slice of pointers to GameRound.
	// This should almost always be used instead of []GameRound.
	GameRoundSlice []*GameRound
	// GameRoundHook is the signature for custom GameRound hook methods
	GameRoundHook func(context.Context, boil.ContextExecutor, *GameRound) error

	gameRoundQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	gameRoundType                 = reflect.TypeOf(&GameRound{})
	gameRoundMapping              = queries.MakeStructMapping(gameRoundType)
	gameRoundPrimaryKeyMapping, _ = queries.BindMapping(gameRoundType, gameRoundMapping, gameRoundPrimaryKeyColumns)
	gameRoundInsertCacheMut       sync.RWMutex
	gameRoundInsertCache          = make(map[string]insertCache)
	gameRoundUpdateCacheMut       sync.RWMutex
	gameRoundUpdateCache          = make(map[string]updateCache)
	gameRoundUpsertCacheMut       sync.RWMutex
	gameRoundUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var gameRoundAfterSelectMu sync.Mutex
var gameRoundAfterSelectHooks []GameRoundHook

var gameRoundBeforeInsertMu sync.Mutex
var gameRoundBeforeInsertHooks []GameRoundHook
var gameRoundAfterInsertMu sync.Mutex
var gameRoundAfterInsertHooks []GameRoundHook

var gameRoundBeforeUpdateMu sync.Mutex
var gameRoundBeforeUpdateHooks []GameRoundHook
var gameRoundAfterUpdateMu sync.Mutex
var gameRoundAfterUpdateHooks []GameRoundHook

var gameRoundBeforeDeleteMu sync.Mutex
var gameRoundBeforeDeleteHooks []GameRoundHook
var gameRoundAfterDeleteMu sync.Mutex
var gameRoundAfterDeleteHooks []GameRoundHook

var gameRoundBeforeUpsertMu sync.Mutex
var gameRoundBeforeUpsertHooks []GameRoundHook
var gameRoundAfterUpsertMu sync.Mutex
var gameRoundAfterUpsertHooks []GameRoundHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *GameRound) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range gameRoundAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *GameRound) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range gameRoundBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *GameRound) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range gameRoundAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *GameRound) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range gameRoundBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *GameRound) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range gameRoundAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *GameRound) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range gameRoundBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *GameRound) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range gameRoundAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *GameRound) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range gameRoundBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *GameRound) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range gameRoundAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddGameRoundHook registers your hook function for all future operations.
func AddGameRoundHook(hookPoint boil.HookPoint, gameRoundHook GameRoundHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		gameRoundAfterSelectMu.Lock()
		gameRoundAfterSelectHooks = append(gameRoundAfterSelectHooks, gameRoundHook)
		gameRoundAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		gameRoundBeforeInsertMu.Lock()
		gameRoundBeforeInsertHooks = append(gameRoundBeforeInsertHooks, gameRoundHook)
		gameRoundBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		gameRoundAfterInsertMu.Lock()
		gameRoundAfterInsertHooks = append(gameRoundAfterInsertHooks, gameRoundHook)
		gameRoundAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		gameRoundBeforeUpdateMu.Lock()
		gameRoundBeforeUpdateHooks = append(gameRoundBeforeUpdateHooks, gameRoundHook)
		gameRoundBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		gameRoundAfterUpdateMu.Lock()
		gameRoundAfterUpdateHooks = append(gameRoundAfterUpdateHooks, gameRoundHook)
		gameRoundAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		gameRoundBeforeDeleteMu.Lock()
		gameRoundBeforeDeleteHooks = append(gameRoundBeforeDeleteHooks, gameRoundHook)
		gameRoundBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		gameRoundAfterDeleteMu.Lock()
		gameRoundAfterDeleteHooks = append(gameRoundAfterDeleteHooks, gameRoundHook)
		gameRoundAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		gameRoundBeforeUpsertMu.Lock()
		gameRoundBeforeUpsertHooks = append(gameRoundBeforeUpsertHooks, gameRoundHook)
		gameRoundBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		gameRoundAfterUpsertMu.Lock()
		gameRoundAfterUpsertHooks = append(gameRoundAfterUpsertHooks, gameRoundHook)
		gameRoundAfterUpsertMu.Unlock()
	}
}

// One returns a single gameRound record from the query.
func (q gameRoundQuery) One(ctx context.Context, exec boil.ContextExecutor) (*GameRound, error) {
	o := &GameRound{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for game_rounds")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all GameRound records from the query.
func (q gameRoundQuery) All(ctx context.Context, exec boil.ContextExecutor) (GameRoundSlice, error) {
	var o []*GameRound

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to GameRound slice")
	}

	if len(gameRoundAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all GameRound records in the query.
func (q gameRoundQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count game_rounds rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q gameRoundQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if game_rounds exists")
	}

	return count > 0, nil
}

// Game pointed to by the foreign key.
func (o *GameRound) Game(mods ...qm.QueryMod) gameQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"uuid\" = ?", o.GameUUID),
	}

	queryMods = append(queryMods, mods...)

	return Games(queryMods...)
}

// User pointed to by the foreign key.
func (o *GameRound) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"uuid\" = ?", o.UserUUID),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// LoadGame allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (gameRoundL) LoadGame(ctx context.Context, e boil.ContextExecutor, singular bool, maybeGameRound interface{}, mods queries.Applicator) error {
	var slice []*GameRound
	var object *GameRound

	if singular {
		var ok bool
		object, ok = maybeGameRound.(*GameRound)
		if !ok {
			object = new(GameRound)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeGameRound)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeGameRound))
			}
		}
	} else {
		s, ok := maybeGameRound.(*[]*GameRound)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeGameRound)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeGameRound))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &gameRoundR{}
		}
		if !queries.IsNil(object.GameUUID) {
			args[object.GameUUID] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &gameRoundR{}
			}

			if !queries.IsNil(obj.GameUUID) {
				args[obj.GameUUID] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`game`),
		qm.WhereIn(`game.uuid in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Game")
	}

	var resultSlice []*Game
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Game")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for game")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for game")
	}

	if len(gameAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Game = foreign
		if foreign.R == nil {
			foreign.R = &gameR{}
		}
		foreign.R.GameRounds = append(foreign.R.GameRounds, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.GameUUID, foreign.UUID) {
				local.R.Game = foreign
				if foreign.R == nil {
					foreign.R = &gameR{}
				}
				foreign.R.GameRounds = append(foreign.R.GameRounds, local)
				break
			}
		}
	}

	return nil
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (gameRoundL) LoadUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeGameRound interface{}, mods queries.Applicator) error {
	var slice []*GameRound
	var object *GameRound

	if singular {
		var ok bool
		object, ok = maybeGameRound.(*GameRound)
		if !ok {
			object = new(GameRound)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeGameRound)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeGameRound))
			}
		}
	} else {
		s, ok := maybeGameRound.(*[]*GameRound)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeGameRound)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeGameRound))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &gameRoundR{}
		}
		if !queries.IsNil(object.UserUUID) {
			args[object.UserUUID] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &gameRoundR{}
			}

			if !queries.IsNil(obj.UserUUID) {
				args[obj.UserUUID] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.uuid in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.GameRounds = append(foreign.R.GameRounds, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.UserUUID, foreign.UUID) {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.GameRounds = append(foreign.R.GameRounds, local)
				break
			}
		}
	}

	return nil
}

// SetGame of the gameRound to the related item.
// Sets o.R.Game to related.
// Adds o to related.R.GameRounds.
func (o *GameRound) SetGame(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Game) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"game_rounds\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"game_uuid"}),
		strmangle.WhereClause("\"", "\"", 2, gameRoundPrimaryKeyColumns),
	)
	values := []interface{}{related.UUID, o.UUID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.GameUUID, related.UUID)
	if o.R == nil {
		o.R = &gameRoundR{
			Game: related,
		}
	} else {
		o.R.Game = related
	}

	if related.R == nil {
		related.R = &gameR{
			GameRounds: GameRoundSlice{o},
		}
	} else {
		related.R.GameRounds = append(related.R.GameRounds, o)
	}

	return nil
}

// RemoveGame relationship.
// Sets o.R.Game to nil.
// Removes o from all passed in related items' relationships struct.
func (o *GameRound) RemoveGame(ctx context.Context, exec boil.ContextExecutor, related *Game) error {
	var err error

	queries.SetScanner(&o.GameUUID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("game_uuid")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Game = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.GameRounds {
		if queries.Equal(o.GameUUID, ri.GameUUID) {
			continue
		}

		ln := len(related.R.GameRounds)
		if ln > 1 && i < ln-1 {
			related.R.GameRounds[i] = related.R.GameRounds[ln-1]
		}
		related.R.GameRounds = related.R.GameRounds[:ln-1]
		break
	}
	return nil
}

// SetUser of the gameRound to the related item.
// Sets o.R.User to related.
// Adds o to related.R.GameRounds.
func (o *GameRound) SetUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"game_rounds\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_uuid"}),
		strmangle.WhereClause("\"", "\"", 2, gameRoundPrimaryKeyColumns),
	)
	values := []interface{}{related.UUID, o.UUID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.UserUUID, related.UUID)
	if o.R == nil {
		o.R = &gameRoundR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			GameRounds: GameRoundSlice{o},
		}
	} else {
		related.R.GameRounds = append(related.R.GameRounds, o)
	}

	return nil
}

// RemoveUser relationship.
// Sets o.R.User to nil.
// Removes o from all passed in related items' relationships struct.
func (o *GameRound) RemoveUser(ctx context.Context, exec boil.ContextExecutor, related *User) error {
	var err error

	queries.SetScanner(&o.UserUUID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("user_uuid")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.User = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.GameRounds {
		if queries.Equal(o.UserUUID, ri.UserUUID) {
			continue
		}

		ln := len(related.R.GameRounds)
		if ln > 1 && i < ln-1 {
			related.R.GameRounds[i] = related.R.GameRounds[ln-1]
		}
		related.R.GameRounds = related.R.GameRounds[:ln-1]
		break
	}
	return nil
}

// GameRounds retrieves all the records using an executor.
func GameRounds(mods ...qm.QueryMod) gameRoundQuery {
	mods = append(mods, qm.From("\"game_rounds\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"game_rounds\".*"})
	}

	return gameRoundQuery{q}
}

// FindGameRound retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindGameRound(ctx context.Context, exec boil.ContextExecutor, uUID string, selectCols ...string) (*GameRound, error) {
	gameRoundObj := &GameRound{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"game_rounds\" where \"uuid\"=$1", sel,
	)

	q := queries.Raw(query, uUID)

	err := q.Bind(ctx, exec, gameRoundObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from game_rounds")
	}

	if err = gameRoundObj.doAfterSelectHooks(ctx, exec); err != nil {
		return gameRoundObj, err
	}

	return gameRoundObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *GameRound) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no game_rounds provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(gameRoundColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	gameRoundInsertCacheMut.RLock()
	cache, cached := gameRoundInsertCache[key]
	gameRoundInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			gameRoundAllColumns,
			gameRoundColumnsWithDefault,
			gameRoundColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(gameRoundType, gameRoundMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(gameRoundType, gameRoundMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"game_rounds\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"game_rounds\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into game_rounds")
	}

	if !cached {
		gameRoundInsertCacheMut.Lock()
		gameRoundInsertCache[key] = cache
		gameRoundInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the GameRound.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *GameRound) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	gameRoundUpdateCacheMut.RLock()
	cache, cached := gameRoundUpdateCache[key]
	gameRoundUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			gameRoundAllColumns,
			gameRoundPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update game_rounds, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"game_rounds\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, gameRoundPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(gameRoundType, gameRoundMapping, append(wl, gameRoundPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update game_rounds row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for game_rounds")
	}

	if !cached {
		gameRoundUpdateCacheMut.Lock()
		gameRoundUpdateCache[key] = cache
		gameRoundUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q gameRoundQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for game_rounds")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for game_rounds")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o GameRoundSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), gameRoundPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"game_rounds\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, gameRoundPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in gameRound slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all gameRound")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *GameRound) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no game_rounds provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(gameRoundColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	gameRoundUpsertCacheMut.RLock()
	cache, cached := gameRoundUpsertCache[key]
	gameRoundUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			gameRoundAllColumns,
			gameRoundColumnsWithDefault,
			gameRoundColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			gameRoundAllColumns,
			gameRoundPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert game_rounds, could not build update column list")
		}

		ret := strmangle.SetComplement(gameRoundAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(gameRoundPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert game_rounds, could not build conflict column list")
			}

			conflict = make([]string, len(gameRoundPrimaryKeyColumns))
			copy(conflict, gameRoundPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"game_rounds\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(gameRoundType, gameRoundMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(gameRoundType, gameRoundMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert game_rounds")
	}

	if !cached {
		gameRoundUpsertCacheMut.Lock()
		gameRoundUpsertCache[key] = cache
		gameRoundUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single GameRound record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *GameRound) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no GameRound provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), gameRoundPrimaryKeyMapping)
	sql := "DELETE FROM \"game_rounds\" WHERE \"uuid\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from game_rounds")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for game_rounds")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q gameRoundQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no gameRoundQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from game_rounds")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for game_rounds")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o GameRoundSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(gameRoundBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), gameRoundPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"game_rounds\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, gameRoundPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from gameRound slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for game_rounds")
	}

	if len(gameRoundAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *GameRound) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindGameRound(ctx, exec, o.UUID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *GameRoundSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := GameRoundSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), gameRoundPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"game_rounds\".* FROM \"game_rounds\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, gameRoundPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in GameRoundSlice")
	}

	*o = slice

	return nil
}

// GameRoundExists checks if the GameRound row exists.
func GameRoundExists(ctx context.Context, exec boil.ContextExecutor, uUID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"game_rounds\" where \"uuid\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, uUID)
	}
	row := exec.QueryRowContext(ctx, sql, uUID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if game_rounds exists")
	}

	return exists, nil
}

// Exists checks if the GameRound row exists.
func (o *GameRound) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return GameRoundExists(ctx, exec, o.UUID)
}
