// Code generated by SQLBoiler 4.18.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// GameBet is an object representing the database table.
type GameBet struct {
	GameUUID  string        `boil:"game_uuid" json:"game_uuid" toml:"game_uuid" yaml:"game_uuid"`
	UserUUID  string        `boil:"user_uuid" json:"user_uuid" toml:"user_uuid" yaml:"user_uuid"`
	BetAmount types.Decimal `boil:"bet_amount" json:"bet_amount" toml:"bet_amount" yaml:"bet_amount"`

	R *gameBetR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L gameBetL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var GameBetColumns = struct {
	GameUUID  string
	UserUUID  string
	BetAmount string
}{
	GameUUID:  "game_uuid",
	UserUUID:  "user_uuid",
	BetAmount: "bet_amount",
}

var GameBetTableColumns = struct {
	GameUUID  string
	UserUUID  string
	BetAmount string
}{
	GameUUID:  "game_bets.game_uuid",
	UserUUID:  "game_bets.user_uuid",
	BetAmount: "game_bets.bet_amount",
}

// Generated where

var GameBetWhere = struct {
	GameUUID  whereHelperstring
	UserUUID  whereHelperstring
	BetAmount whereHelpertypes_Decimal
}{
	GameUUID:  whereHelperstring{field: "\"game_bets\".\"game_uuid\""},
	UserUUID:  whereHelperstring{field: "\"game_bets\".\"user_uuid\""},
	BetAmount: whereHelpertypes_Decimal{field: "\"game_bets\".\"bet_amount\""},
}

// GameBetRels is where relationship names are stored.
var GameBetRels = struct {
	Game string
}{
	Game: "Game",
}

// gameBetR is where relationships are stored.
type gameBetR struct {
	Game *Game `boil:"Game" json:"Game" toml:"Game" yaml:"Game"`
}

// NewStruct creates a new relationship struct
func (*gameBetR) NewStruct() *gameBetR {
	return &gameBetR{}
}

func (r *gameBetR) GetGame() *Game {
	if r == nil {
		return nil
	}
	return r.Game
}

// gameBetL is where Load methods for each relationship are stored.
type gameBetL struct{}

var (
	gameBetAllColumns            = []string{"game_uuid", "user_uuid", "bet_amount"}
	gameBetColumnsWithoutDefault = []string{"game_uuid", "user_uuid", "bet_amount"}
	gameBetColumnsWithDefault    = []string{}
	gameBetPrimaryKeyColumns     = []string{"game_uuid", "user_uuid"}
	gameBetGeneratedColumns      = []string{}
)

type (
	// GameBetSlice is an alias for a slice of pointers to GameBet.
	// This should almost always be used instead of []GameBet.
	GameBetSlice []*GameBet
	// GameBetHook is the signature for custom GameBet hook methods
	GameBetHook func(context.Context, boil.ContextExecutor, *GameBet) error

	gameBetQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	gameBetType                 = reflect.TypeOf(&GameBet{})
	gameBetMapping              = queries.MakeStructMapping(gameBetType)
	gameBetPrimaryKeyMapping, _ = queries.BindMapping(gameBetType, gameBetMapping, gameBetPrimaryKeyColumns)
	gameBetInsertCacheMut       sync.RWMutex
	gameBetInsertCache          = make(map[string]insertCache)
	gameBetUpdateCacheMut       sync.RWMutex
	gameBetUpdateCache          = make(map[string]updateCache)
	gameBetUpsertCacheMut       sync.RWMutex
	gameBetUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var gameBetAfterSelectMu sync.Mutex
var gameBetAfterSelectHooks []GameBetHook

var gameBetBeforeInsertMu sync.Mutex
var gameBetBeforeInsertHooks []GameBetHook
var gameBetAfterInsertMu sync.Mutex
var gameBetAfterInsertHooks []GameBetHook

var gameBetBeforeUpdateMu sync.Mutex
var gameBetBeforeUpdateHooks []GameBetHook
var gameBetAfterUpdateMu sync.Mutex
var gameBetAfterUpdateHooks []GameBetHook

var gameBetBeforeDeleteMu sync.Mutex
var gameBetBeforeDeleteHooks []GameBetHook
var gameBetAfterDeleteMu sync.Mutex
var gameBetAfterDeleteHooks []GameBetHook

var gameBetBeforeUpsertMu sync.Mutex
var gameBetBeforeUpsertHooks []GameBetHook
var gameBetAfterUpsertMu sync.Mutex
var gameBetAfterUpsertHooks []GameBetHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *GameBet) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range gameBetAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *GameBet) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range gameBetBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *GameBet) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range gameBetAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *GameBet) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range gameBetBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *GameBet) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range gameBetAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *GameBet) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range gameBetBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *GameBet) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range gameBetAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *GameBet) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range gameBetBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *GameBet) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range gameBetAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddGameBetHook registers your hook function for all future operations.
func AddGameBetHook(hookPoint boil.HookPoint, gameBetHook GameBetHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		gameBetAfterSelectMu.Lock()
		gameBetAfterSelectHooks = append(gameBetAfterSelectHooks, gameBetHook)
		gameBetAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		gameBetBeforeInsertMu.Lock()
		gameBetBeforeInsertHooks = append(gameBetBeforeInsertHooks, gameBetHook)
		gameBetBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		gameBetAfterInsertMu.Lock()
		gameBetAfterInsertHooks = append(gameBetAfterInsertHooks, gameBetHook)
		gameBetAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		gameBetBeforeUpdateMu.Lock()
		gameBetBeforeUpdateHooks = append(gameBetBeforeUpdateHooks, gameBetHook)
		gameBetBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		gameBetAfterUpdateMu.Lock()
		gameBetAfterUpdateHooks = append(gameBetAfterUpdateHooks, gameBetHook)
		gameBetAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		gameBetBeforeDeleteMu.Lock()
		gameBetBeforeDeleteHooks = append(gameBetBeforeDeleteHooks, gameBetHook)
		gameBetBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		gameBetAfterDeleteMu.Lock()
		gameBetAfterDeleteHooks = append(gameBetAfterDeleteHooks, gameBetHook)
		gameBetAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		gameBetBeforeUpsertMu.Lock()
		gameBetBeforeUpsertHooks = append(gameBetBeforeUpsertHooks, gameBetHook)
		gameBetBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		gameBetAfterUpsertMu.Lock()
		gameBetAfterUpsertHooks = append(gameBetAfterUpsertHooks, gameBetHook)
		gameBetAfterUpsertMu.Unlock()
	}
}

// One returns a single gameBet record from the query.
func (q gameBetQuery) One(ctx context.Context, exec boil.ContextExecutor) (*GameBet, error) {
	o := &GameBet{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for game_bets")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all GameBet records from the query.
func (q gameBetQuery) All(ctx context.Context, exec boil.ContextExecutor) (GameBetSlice, error) {
	var o []*GameBet

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to GameBet slice")
	}

	if len(gameBetAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all GameBet records in the query.
func (q gameBetQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count game_bets rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q gameBetQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if game_bets exists")
	}

	return count > 0, nil
}

// Game pointed to by the foreign key.
func (o *GameBet) Game(mods ...qm.QueryMod) gameQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"uuid\" = ?", o.GameUUID),
	}

	queryMods = append(queryMods, mods...)

	return Games(queryMods...)
}

// LoadGame allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (gameBetL) LoadGame(ctx context.Context, e boil.ContextExecutor, singular bool, maybeGameBet interface{}, mods queries.Applicator) error {
	var slice []*GameBet
	var object *GameBet

	if singular {
		var ok bool
		object, ok = maybeGameBet.(*GameBet)
		if !ok {
			object = new(GameBet)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeGameBet)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeGameBet))
			}
		}
	} else {
		s, ok := maybeGameBet.(*[]*GameBet)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeGameBet)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeGameBet))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &gameBetR{}
		}
		args[object.GameUUID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &gameBetR{}
			}

			args[obj.GameUUID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`game`),
		qm.WhereIn(`game.uuid in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Game")
	}

	var resultSlice []*Game
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Game")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for game")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for game")
	}

	if len(gameAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Game = foreign
		if foreign.R == nil {
			foreign.R = &gameR{}
		}
		foreign.R.GameBets = append(foreign.R.GameBets, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.GameUUID == foreign.UUID {
				local.R.Game = foreign
				if foreign.R == nil {
					foreign.R = &gameR{}
				}
				foreign.R.GameBets = append(foreign.R.GameBets, local)
				break
			}
		}
	}

	return nil
}

// SetGame of the gameBet to the related item.
// Sets o.R.Game to related.
// Adds o to related.R.GameBets.
func (o *GameBet) SetGame(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Game) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"game_bets\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"game_uuid"}),
		strmangle.WhereClause("\"", "\"", 2, gameBetPrimaryKeyColumns),
	)
	values := []interface{}{related.UUID, o.GameUUID, o.UserUUID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.GameUUID = related.UUID
	if o.R == nil {
		o.R = &gameBetR{
			Game: related,
		}
	} else {
		o.R.Game = related
	}

	if related.R == nil {
		related.R = &gameR{
			GameBets: GameBetSlice{o},
		}
	} else {
		related.R.GameBets = append(related.R.GameBets, o)
	}

	return nil
}

// GameBets retrieves all the records using an executor.
func GameBets(mods ...qm.QueryMod) gameBetQuery {
	mods = append(mods, qm.From("\"game_bets\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"game_bets\".*"})
	}

	return gameBetQuery{q}
}

// FindGameBet retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindGameBet(ctx context.Context, exec boil.ContextExecutor, gameUUID string, userUUID string, selectCols ...string) (*GameBet, error) {
	gameBetObj := &GameBet{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"game_bets\" where \"game_uuid\"=$1 AND \"user_uuid\"=$2", sel,
	)

	q := queries.Raw(query, gameUUID, userUUID)

	err := q.Bind(ctx, exec, gameBetObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from game_bets")
	}

	if err = gameBetObj.doAfterSelectHooks(ctx, exec); err != nil {
		return gameBetObj, err
	}

	return gameBetObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *GameBet) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no game_bets provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(gameBetColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	gameBetInsertCacheMut.RLock()
	cache, cached := gameBetInsertCache[key]
	gameBetInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			gameBetAllColumns,
			gameBetColumnsWithDefault,
			gameBetColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(gameBetType, gameBetMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(gameBetType, gameBetMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"game_bets\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"game_bets\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into game_bets")
	}

	if !cached {
		gameBetInsertCacheMut.Lock()
		gameBetInsertCache[key] = cache
		gameBetInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the GameBet.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *GameBet) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	gameBetUpdateCacheMut.RLock()
	cache, cached := gameBetUpdateCache[key]
	gameBetUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			gameBetAllColumns,
			gameBetPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update game_bets, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"game_bets\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, gameBetPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(gameBetType, gameBetMapping, append(wl, gameBetPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update game_bets row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for game_bets")
	}

	if !cached {
		gameBetUpdateCacheMut.Lock()
		gameBetUpdateCache[key] = cache
		gameBetUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q gameBetQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for game_bets")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for game_bets")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o GameBetSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), gameBetPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"game_bets\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, gameBetPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in gameBet slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all gameBet")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *GameBet) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no game_bets provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(gameBetColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	gameBetUpsertCacheMut.RLock()
	cache, cached := gameBetUpsertCache[key]
	gameBetUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			gameBetAllColumns,
			gameBetColumnsWithDefault,
			gameBetColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			gameBetAllColumns,
			gameBetPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert game_bets, could not build update column list")
		}

		ret := strmangle.SetComplement(gameBetAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(gameBetPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert game_bets, could not build conflict column list")
			}

			conflict = make([]string, len(gameBetPrimaryKeyColumns))
			copy(conflict, gameBetPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"game_bets\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(gameBetType, gameBetMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(gameBetType, gameBetMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert game_bets")
	}

	if !cached {
		gameBetUpsertCacheMut.Lock()
		gameBetUpsertCache[key] = cache
		gameBetUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single GameBet record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *GameBet) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no GameBet provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), gameBetPrimaryKeyMapping)
	sql := "DELETE FROM \"game_bets\" WHERE \"game_uuid\"=$1 AND \"user_uuid\"=$2"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from game_bets")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for game_bets")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q gameBetQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no gameBetQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from game_bets")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for game_bets")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o GameBetSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(gameBetBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), gameBetPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"game_bets\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, gameBetPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from gameBet slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for game_bets")
	}

	if len(gameBetAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *GameBet) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindGameBet(ctx, exec, o.GameUUID, o.UserUUID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *GameBetSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := GameBetSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), gameBetPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"game_bets\".* FROM \"game_bets\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, gameBetPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in GameBetSlice")
	}

	*o = slice

	return nil
}

// GameBetExists checks if the GameBet row exists.
func GameBetExists(ctx context.Context, exec boil.ContextExecutor, gameUUID string, userUUID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"game_bets\" where \"game_uuid\"=$1 AND \"user_uuid\"=$2 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, gameUUID, userUUID)
	}
	row := exec.QueryRowContext(ctx, sql, gameUUID, userUUID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if game_bets exists")
	}

	return exists, nil
}

// Exists checks if the GameBet row exists.
func (o *GameBet) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return GameBetExists(ctx, exec, o.GameUUID, o.UserUUID)
}
